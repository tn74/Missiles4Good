// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/26/2018 13:59:18"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          typer_logic
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module typer_logic_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] character_input;
reg clock;
reg [7:0] col_num;
reg [7:0] row_num;
reg start_writing_character;
// wires                                               
wire finished_saving_char;
wire [18:0] mem_waddr;
wire [2:0] mem_wdata;
wire mem_wenable;

// assign statements (if any)                          
typer_logic i1 (
// port map - connection between master ports and signals/registers   
	.character_input(character_input),
	.clock(clock),
	.col_num(col_num),
	.finished_saving_char(finished_saving_char),
	.mem_waddr(mem_waddr),
	.mem_wdata(mem_wdata),
	.mem_wenable(mem_wenable),
	.row_num(row_num),
	.start_writing_character(start_writing_character)
);
initial 
begin 
#1000000 $finish;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 

// start_writing_character
initial
begin
	start_writing_character = 1'b0;
	start_writing_character = #100000 1'b1;
	start_writing_character = #20000 1'b0;
end 
// character_input[ 7 ]
initial
begin
	character_input[7] = 1'b0;
end 
// character_input[ 6 ]
initial
begin
	character_input[6] = 1'b0;
end 
// character_input[ 5 ]
initial
begin
	character_input[5] = 1'b0;
end 
// character_input[ 4 ]
initial
begin
	character_input[4] = 1'b1;
end 
// character_input[ 3 ]
initial
begin
	character_input[3] = 1'b1;
end 
// character_input[ 2 ]
initial
begin
	character_input[2] = 1'b0;
end 
// character_input[ 1 ]
initial
begin
	character_input[1] = 1'b0;
end 
// character_input[ 0 ]
initial
begin
	character_input[0] = 1'b1;
end 
// col_num[ 7 ]
initial
begin
	col_num[7] = 1'b0;
end 
// col_num[ 6 ]
initial
begin
	col_num[6] = 1'b0;
end 
// col_num[ 5 ]
initial
begin
	col_num[5] = 1'b0;
end 
// col_num[ 4 ]
initial
begin
	col_num[4] = 1'b0;
end 
// col_num[ 3 ]
initial
begin
	col_num[3] = 1'b0;
end 
// col_num[ 2 ]
initial
begin
	col_num[2] = 1'b0;
end 
// col_num[ 1 ]
initial
begin
	col_num[1] = 1'b0;
end 
// col_num[ 0 ]
initial
begin
	col_num[0] = 1'b0;
end 
// row_num[ 7 ]
initial
begin
	row_num[7] = 1'b0;
end 
// row_num[ 6 ]
initial
begin
	row_num[6] = 1'b0;
end 
// row_num[ 5 ]
initial
begin
	row_num[5] = 1'b0;
end 
// row_num[ 4 ]
initial
begin
	row_num[4] = 1'b0;
end 
// row_num[ 3 ]
initial
begin
	row_num[3] = 1'b0;
end 
// row_num[ 2 ]
initial
begin
	row_num[2] = 1'b0;
end 
// row_num[ 1 ]
initial
begin
	row_num[1] = 1'b0;
end 
// row_num[ 0 ]
initial
begin
	row_num[0] = 1'b0;
end 
endmodule

