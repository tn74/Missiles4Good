// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/05/2018 18:36:45"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          targets_printer_tracker
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module targets_printer_tracker_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg start;
reg [32:0] targetx;
reg [32:0] targety;
// wires                                               
wire [7:0] char_data;
wire [7:0] char_index;
wire finish;

// assign statements (if any)                          
targets_printer_tracker i1 (
// port map - connection between master ports and signals/registers   
	.char_data(char_data),
	.char_index(char_index),
	.clock(clock),
	.finish(finish),
	.start(start),
	.targetx(targetx),
	.targety(targety)
);
initial 
begin 
#1000000 $finish;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 

// start
initial
begin
	start = 1'b0;
	start = #80000 1'b1;
	start = #20000 1'b0;
end 
// targetx[ 32 ]
initial
begin
	targetx[32] = 1'b0;
end 
// targetx[ 31 ]
initial
begin
	targetx[31] = 1'b0;
end 
// targetx[ 30 ]
initial
begin
	targetx[30] = 1'b0;
end 
// targetx[ 29 ]
initial
begin
	targetx[29] = 1'b0;
end 
// targetx[ 28 ]
initial
begin
	targetx[28] = 1'b0;
end 
// targetx[ 27 ]
initial
begin
	targetx[27] = 1'b1;
end 
// targetx[ 26 ]
initial
begin
	targetx[26] = 1'b0;
end 
// targetx[ 25 ]
initial
begin
	targetx[25] = 1'b0;
end 
// targetx[ 24 ]
initial
begin
	targetx[24] = 1'b1;
end 
// targetx[ 23 ]
initial
begin
	targetx[23] = 1'b0;
end 
// targetx[ 22 ]
initial
begin
	targetx[22] = 1'b0;
end 
// targetx[ 21 ]
initial
begin
	targetx[21] = 1'b0;
end 
// targetx[ 20 ]
initial
begin
	targetx[20] = 1'b0;
end 
// targetx[ 19 ]
initial
begin
	targetx[19] = 1'b1;
end 
// targetx[ 18 ]
initial
begin
	targetx[18] = 1'b0;
end 
// targetx[ 17 ]
initial
begin
	targetx[17] = 1'b0;
end 
// targetx[ 16 ]
initial
begin
	targetx[16] = 1'b0;
end 
// targetx[ 15 ]
initial
begin
	targetx[15] = 1'b0;
end 
// targetx[ 14 ]
initial
begin
	targetx[14] = 1'b0;
end 
// targetx[ 13 ]
initial
begin
	targetx[13] = 1'b0;
end 
// targetx[ 12 ]
initial
begin
	targetx[12] = 1'b0;
end 
// targetx[ 11 ]
initial
begin
	targetx[11] = 1'b0;
end 
// targetx[ 10 ]
initial
begin
	targetx[10] = 1'b1;
end 
// targetx[ 9 ]
initial
begin
	targetx[9] = 1'b1;
end 
// targetx[ 8 ]
initial
begin
	targetx[8] = 1'b1;
end 
// targetx[ 7 ]
initial
begin
	targetx[7] = 1'b0;
end 
// targetx[ 6 ]
initial
begin
	targetx[6] = 1'b0;
end 
// targetx[ 5 ]
initial
begin
	targetx[5] = 1'b0;
end 
// targetx[ 4 ]
initial
begin
	targetx[4] = 1'b0;
end 
// targetx[ 3 ]
initial
begin
	targetx[3] = 1'b0;
end 
// targetx[ 2 ]
initial
begin
	targetx[2] = 1'b1;
end 
// targetx[ 1 ]
initial
begin
	targetx[1] = 1'b1;
end 
// targetx[ 0 ]
initial
begin
	targetx[0] = 1'b0;
end 
// targety[ 32 ]
initial
begin
	targety[32] = 1'b0;
end 
// targety[ 31 ]
initial
begin
	targety[31] = 1'b0;
end 
// targety[ 30 ]
initial
begin
	targety[30] = 1'b0;
end 
// targety[ 29 ]
initial
begin
	targety[29] = 1'b0;
end 
// targety[ 28 ]
initial
begin
	targety[28] = 1'b0;
end 
// targety[ 27 ]
initial
begin
	targety[27] = 1'b0;
end 
// targety[ 26 ]
initial
begin
	targety[26] = 1'b1;
end 
// targety[ 25 ]
initial
begin
	targety[25] = 1'b0;
end 
// targety[ 24 ]
initial
begin
	targety[24] = 1'b1;
end 
// targety[ 23 ]
initial
begin
	targety[23] = 1'b0;
end 
// targety[ 22 ]
initial
begin
	targety[22] = 1'b0;
end 
// targety[ 21 ]
initial
begin
	targety[21] = 1'b0;
end 
// targety[ 20 ]
initial
begin
	targety[20] = 1'b0;
end 
// targety[ 19 ]
initial
begin
	targety[19] = 1'b0;
end 
// targety[ 18 ]
initial
begin
	targety[18] = 1'b1;
end 
// targety[ 17 ]
initial
begin
	targety[17] = 1'b0;
end 
// targety[ 16 ]
initial
begin
	targety[16] = 1'b0;
end 
// targety[ 15 ]
initial
begin
	targety[15] = 1'b0;
end 
// targety[ 14 ]
initial
begin
	targety[14] = 1'b0;
end 
// targety[ 13 ]
initial
begin
	targety[13] = 1'b0;
end 
// targety[ 12 ]
initial
begin
	targety[12] = 1'b0;
end 
// targety[ 11 ]
initial
begin
	targety[11] = 1'b0;
end 
// targety[ 10 ]
initial
begin
	targety[10] = 1'b0;
end 
// targety[ 9 ]
initial
begin
	targety[9] = 1'b1;
end 
// targety[ 8 ]
initial
begin
	targety[8] = 1'b1;
end 
// targety[ 7 ]
initial
begin
	targety[7] = 1'b0;
end 
// targety[ 6 ]
initial
begin
	targety[6] = 1'b0;
end 
// targety[ 5 ]
initial
begin
	targety[5] = 1'b0;
end 
// targety[ 4 ]
initial
begin
	targety[4] = 1'b0;
end 
// targety[ 3 ]
initial
begin
	targety[3] = 1'b0;
end 
// targety[ 2 ]
initial
begin
	targety[2] = 1'b0;
end 
// targety[ 1 ]
initial
begin
	targety[1] = 1'b1;
end 
// targety[ 0 ]
initial
begin
	targety[0] = 1'b0;
end 
endmodule

