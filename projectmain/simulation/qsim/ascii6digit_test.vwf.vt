// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/04/2018 20:41:55"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ascii6digit_to_number
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ascii6digit_to_number_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [47:0] ascii;
// wires                                               
wire [31:0] hundreds;
wire [31:0] hundth;
wire [31:0] number;
wire [31:0] ones;
wire [31:0] tens;
wire [31:0] tenth;
wire [31:0] thousands;

// assign statements (if any)                          
ascii6digit_to_number i1 (
// port map - connection between master ports and signals/registers   
	.ascii(ascii),
	.hundreds(hundreds),
	.hundth(hundth),
	.number(number),
	.ones(ones),
	.tens(tens),
	.tenth(tenth),
	.thousands(thousands)
);
initial 
begin 
#1000000 $finish;
end 
// ascii[ 47 ]
initial
begin
	ascii[47] = 1'b0;
end 
// ascii[ 46 ]
initial
begin
	ascii[46] = 1'b0;
end 
// ascii[ 45 ]
initial
begin
	ascii[45] = 1'b1;
end 
// ascii[ 44 ]
initial
begin
	ascii[44] = 1'b1;
end 
// ascii[ 43 ]
initial
begin
	ascii[43] = 1'b0;
end 
// ascii[ 42 ]
initial
begin
	ascii[42] = 1'b0;
end 
// ascii[ 41 ]
initial
begin
	ascii[41] = 1'b0;
end 
// ascii[ 40 ]
initial
begin
	ascii[40] = 1'b0;
end 
// ascii[ 39 ]
initial
begin
	ascii[39] = 1'b0;
end 
// ascii[ 38 ]
initial
begin
	ascii[38] = 1'b0;
end 
// ascii[ 37 ]
initial
begin
	ascii[37] = 1'b1;
end 
// ascii[ 36 ]
initial
begin
	ascii[36] = 1'b1;
end 
// ascii[ 35 ]
initial
begin
	ascii[35] = 1'b0;
end 
// ascii[ 34 ]
initial
begin
	ascii[34] = 1'b0;
end 
// ascii[ 33 ]
initial
begin
	ascii[33] = 1'b0;
end 
// ascii[ 32 ]
initial
begin
	ascii[32] = 1'b0;
end 
// ascii[ 31 ]
initial
begin
	ascii[31] = 1'b0;
end 
// ascii[ 30 ]
initial
begin
	ascii[30] = 1'b0;
end 
// ascii[ 29 ]
initial
begin
	ascii[29] = 1'b1;
end 
// ascii[ 28 ]
initial
begin
	ascii[28] = 1'b1;
end 
// ascii[ 27 ]
initial
begin
	ascii[27] = 1'b0;
end 
// ascii[ 26 ]
initial
begin
	ascii[26] = 1'b0;
end 
// ascii[ 25 ]
initial
begin
	ascii[25] = 1'b0;
end 
// ascii[ 24 ]
initial
begin
	ascii[24] = 1'b0;
end 
// ascii[ 23 ]
initial
begin
	ascii[23] = 1'b0;
end 
// ascii[ 22 ]
initial
begin
	ascii[22] = 1'b0;
end 
// ascii[ 21 ]
initial
begin
	ascii[21] = 1'b1;
end 
// ascii[ 20 ]
initial
begin
	ascii[20] = 1'b1;
end 
// ascii[ 19 ]
initial
begin
	ascii[19] = 1'b0;
end 
// ascii[ 18 ]
initial
begin
	ascii[18] = 1'b1;
end 
// ascii[ 17 ]
initial
begin
	ascii[17] = 1'b1;
end 
// ascii[ 16 ]
initial
begin
	ascii[16] = 1'b1;
end 
// ascii[ 15 ]
initial
begin
	ascii[15] = 1'b0;
end 
// ascii[ 14 ]
initial
begin
	ascii[14] = 1'b0;
end 
// ascii[ 13 ]
initial
begin
	ascii[13] = 1'b1;
end 
// ascii[ 12 ]
initial
begin
	ascii[12] = 1'b1;
end 
// ascii[ 11 ]
initial
begin
	ascii[11] = 1'b1;
end 
// ascii[ 10 ]
initial
begin
	ascii[10] = 1'b0;
end 
// ascii[ 9 ]
initial
begin
	ascii[9] = 1'b0;
end 
// ascii[ 8 ]
initial
begin
	ascii[8] = 1'b0;
end 
// ascii[ 7 ]
initial
begin
	ascii[7] = 1'b0;
end 
// ascii[ 6 ]
initial
begin
	ascii[6] = 1'b0;
end 
// ascii[ 5 ]
initial
begin
	ascii[5] = 1'b1;
end 
// ascii[ 4 ]
initial
begin
	ascii[4] = 1'b1;
end 
// ascii[ 3 ]
initial
begin
	ascii[3] = 1'b1;
end 
// ascii[ 2 ]
initial
begin
	ascii[2] = 1'b0;
end 
// ascii[ 1 ]
initial
begin
	ascii[1] = 1'b0;
end 
// ascii[ 0 ]
initial
begin
	ascii[0] = 1'b1;
end 
endmodule

