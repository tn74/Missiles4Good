// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/05/2018 23:58:25"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ps2_interpreter
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ps2_interpreter_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [255:0] input_line;
reg line_ready;
// wires                                               
wire [31:0] angle;
wire fire;
wire [31:0] velocity;

// assign statements (if any)                          
ps2_interpreter i1 (
// port map - connection between master ports and signals/registers   
	.angle(angle),
	.clock(clock),
	.fire(fire),
	.input_line(input_line),
	.line_ready(line_ready),
	.velocity(velocity)
);
initial 
begin 
#1000000 $finish;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 
// input_line[ 255 ]
initial
begin
	input_line[255] = 1'b0;
end 
// input_line[ 254 ]
initial
begin
	input_line[254] = 1'b1;
end 
// input_line[ 253 ]
initial
begin
	input_line[253] = 1'b0;
end 
// input_line[ 252 ]
initial
begin
	input_line[252] = 1'b0;
end 
// input_line[ 251 ]
initial
begin
	input_line[251] = 1'b0;
end 
// input_line[ 250 ]
initial
begin
	input_line[250] = 1'b1;
end 
// input_line[ 249 ]
initial
begin
	input_line[249] = 1'b1;
end 
// input_line[ 248 ]
initial
begin
	input_line[248] = 1'b0;
end 
// input_line[ 247 ]
initial
begin
	input_line[247] = 1'b0;
end 
// input_line[ 246 ]
initial
begin
	input_line[246] = 1'b1;
end 
// input_line[ 245 ]
initial
begin
	input_line[245] = 1'b0;
end 
// input_line[ 244 ]
initial
begin
	input_line[244] = 1'b0;
end 
// input_line[ 243 ]
initial
begin
	input_line[243] = 1'b1;
end 
// input_line[ 242 ]
initial
begin
	input_line[242] = 1'b0;
end 
// input_line[ 241 ]
initial
begin
	input_line[241] = 1'b0;
end 
// input_line[ 240 ]
initial
begin
	input_line[240] = 1'b1;
end 
// input_line[ 239 ]
initial
begin
	input_line[239] = 1'b0;
end 
// input_line[ 238 ]
initial
begin
	input_line[238] = 1'b1;
end 
// input_line[ 237 ]
initial
begin
	input_line[237] = 1'b0;
end 
// input_line[ 236 ]
initial
begin
	input_line[236] = 1'b1;
end 
// input_line[ 235 ]
initial
begin
	input_line[235] = 1'b0;
end 
// input_line[ 234 ]
initial
begin
	input_line[234] = 1'b0;
end 
// input_line[ 233 ]
initial
begin
	input_line[233] = 1'b1;
end 
// input_line[ 232 ]
initial
begin
	input_line[232] = 1'b0;
end 
// input_line[ 231 ]
initial
begin
	input_line[231] = 1'b0;
end 
// input_line[ 230 ]
initial
begin
	input_line[230] = 1'b1;
end 
// input_line[ 229 ]
initial
begin
	input_line[229] = 1'b0;
end 
// input_line[ 228 ]
initial
begin
	input_line[228] = 1'b0;
end 
// input_line[ 227 ]
initial
begin
	input_line[227] = 1'b0;
end 
// input_line[ 226 ]
initial
begin
	input_line[226] = 1'b1;
end 
// input_line[ 225 ]
initial
begin
	input_line[225] = 1'b0;
end 
// input_line[ 224 ]
initial
begin
	input_line[224] = 1'b1;
end 
// input_line[ 223 ]
initial
begin
	input_line[223] = 1'b0;
end 
// input_line[ 222 ]
initial
begin
	input_line[222] = 1'b1;
end 
// input_line[ 221 ]
initial
begin
	input_line[221] = 1'b0;
end 
// input_line[ 220 ]
initial
begin
	input_line[220] = 1'b0;
end 
// input_line[ 219 ]
initial
begin
	input_line[219] = 1'b0;
end 
// input_line[ 218 ]
initial
begin
	input_line[218] = 1'b0;
end 
// input_line[ 217 ]
initial
begin
	input_line[217] = 1'b0;
end 
// input_line[ 216 ]
initial
begin
	input_line[216] = 1'b1;
end 
// input_line[ 215 ]
initial
begin
	input_line[215] = 1'b0;
end 
// input_line[ 214 ]
initial
begin
	input_line[214] = 1'b0;
end 
// input_line[ 213 ]
initial
begin
	input_line[213] = 1'b1;
end 
// input_line[ 212 ]
initial
begin
	input_line[212] = 1'b0;
end 
// input_line[ 211 ]
initial
begin
	input_line[211] = 1'b0;
end 
// input_line[ 210 ]
initial
begin
	input_line[210] = 1'b0;
end 
// input_line[ 209 ]
initial
begin
	input_line[209] = 1'b0;
end 
// input_line[ 208 ]
initial
begin
	input_line[208] = 1'b0;
end 
// input_line[ 207 ]
initial
begin
	input_line[207] = 1'b0;
end 
// input_line[ 206 ]
initial
begin
	input_line[206] = 1'b0;
end 
// input_line[ 205 ]
initial
begin
	input_line[205] = 1'b1;
end 
// input_line[ 204 ]
initial
begin
	input_line[204] = 1'b1;
end 
// input_line[ 203 ]
initial
begin
	input_line[203] = 1'b0;
end 
// input_line[ 202 ]
initial
begin
	input_line[202] = 1'b0;
end 
// input_line[ 201 ]
initial
begin
	input_line[201] = 1'b0;
end 
// input_line[ 200 ]
initial
begin
	input_line[200] = 1'b1;
end 
// input_line[ 199 ]
initial
begin
	input_line[199] = 1'b0;
end 
// input_line[ 198 ]
initial
begin
	input_line[198] = 1'b0;
end 
// input_line[ 197 ]
initial
begin
	input_line[197] = 1'b1;
end 
// input_line[ 196 ]
initial
begin
	input_line[196] = 1'b1;
end 
// input_line[ 195 ]
initial
begin
	input_line[195] = 1'b1;
end 
// input_line[ 194 ]
initial
begin
	input_line[194] = 1'b0;
end 
// input_line[ 193 ]
initial
begin
	input_line[193] = 1'b0;
end 
// input_line[ 192 ]
initial
begin
	input_line[192] = 1'b0;
end 
// input_line[ 191 ]
initial
begin
	input_line[191] = 1'b0;
end 
// input_line[ 190 ]
initial
begin
	input_line[190] = 1'b0;
end 
// input_line[ 189 ]
initial
begin
	input_line[189] = 1'b1;
end 
// input_line[ 188 ]
initial
begin
	input_line[188] = 1'b1;
end 
// input_line[ 187 ]
initial
begin
	input_line[187] = 1'b0;
end 
// input_line[ 186 ]
initial
begin
	input_line[186] = 1'b0;
end 
// input_line[ 185 ]
initial
begin
	input_line[185] = 1'b0;
end 
// input_line[ 184 ]
initial
begin
	input_line[184] = 1'b0;
end 
// input_line[ 183 ]
initial
begin
	input_line[183] = 1'b0;
end 
// input_line[ 182 ]
initial
begin
	input_line[182] = 1'b0;
end 
// input_line[ 181 ]
initial
begin
	input_line[181] = 1'b0;
end 
// input_line[ 180 ]
initial
begin
	input_line[180] = 1'b0;
end 
// input_line[ 179 ]
initial
begin
	input_line[179] = 1'b0;
end 
// input_line[ 178 ]
initial
begin
	input_line[178] = 1'b0;
end 
// input_line[ 177 ]
initial
begin
	input_line[177] = 1'b0;
end 
// input_line[ 176 ]
initial
begin
	input_line[176] = 1'b0;
end 
// input_line[ 175 ]
initial
begin
	input_line[175] = 1'b0;
end 
// input_line[ 174 ]
initial
begin
	input_line[174] = 1'b0;
end 
// input_line[ 173 ]
initial
begin
	input_line[173] = 1'b0;
end 
// input_line[ 172 ]
initial
begin
	input_line[172] = 1'b0;
end 
// input_line[ 171 ]
initial
begin
	input_line[171] = 1'b0;
end 
// input_line[ 170 ]
initial
begin
	input_line[170] = 1'b0;
end 
// input_line[ 169 ]
initial
begin
	input_line[169] = 1'b0;
end 
// input_line[ 168 ]
initial
begin
	input_line[168] = 1'b0;
end 
// input_line[ 167 ]
initial
begin
	input_line[167] = 1'b0;
end 
// input_line[ 166 ]
initial
begin
	input_line[166] = 1'b0;
end 
// input_line[ 165 ]
initial
begin
	input_line[165] = 1'b0;
end 
// input_line[ 164 ]
initial
begin
	input_line[164] = 1'b0;
end 
// input_line[ 163 ]
initial
begin
	input_line[163] = 1'b0;
end 
// input_line[ 162 ]
initial
begin
	input_line[162] = 1'b0;
end 
// input_line[ 161 ]
initial
begin
	input_line[161] = 1'b0;
end 
// input_line[ 160 ]
initial
begin
	input_line[160] = 1'b0;
end 
// input_line[ 159 ]
initial
begin
	input_line[159] = 1'b0;
end 
// input_line[ 158 ]
initial
begin
	input_line[158] = 1'b0;
end 
// input_line[ 157 ]
initial
begin
	input_line[157] = 1'b0;
end 
// input_line[ 156 ]
initial
begin
	input_line[156] = 1'b0;
end 
// input_line[ 155 ]
initial
begin
	input_line[155] = 1'b0;
end 
// input_line[ 154 ]
initial
begin
	input_line[154] = 1'b0;
end 
// input_line[ 153 ]
initial
begin
	input_line[153] = 1'b0;
end 
// input_line[ 152 ]
initial
begin
	input_line[152] = 1'b0;
end 
// input_line[ 151 ]
initial
begin
	input_line[151] = 1'b0;
end 
// input_line[ 150 ]
initial
begin
	input_line[150] = 1'b0;
end 
// input_line[ 149 ]
initial
begin
	input_line[149] = 1'b0;
end 
// input_line[ 148 ]
initial
begin
	input_line[148] = 1'b0;
end 
// input_line[ 147 ]
initial
begin
	input_line[147] = 1'b0;
end 
// input_line[ 146 ]
initial
begin
	input_line[146] = 1'b0;
end 
// input_line[ 145 ]
initial
begin
	input_line[145] = 1'b0;
end 
// input_line[ 144 ]
initial
begin
	input_line[144] = 1'b0;
end 
// input_line[ 143 ]
initial
begin
	input_line[143] = 1'b0;
end 
// input_line[ 142 ]
initial
begin
	input_line[142] = 1'b0;
end 
// input_line[ 141 ]
initial
begin
	input_line[141] = 1'b0;
end 
// input_line[ 140 ]
initial
begin
	input_line[140] = 1'b0;
end 
// input_line[ 139 ]
initial
begin
	input_line[139] = 1'b0;
end 
// input_line[ 138 ]
initial
begin
	input_line[138] = 1'b0;
end 
// input_line[ 137 ]
initial
begin
	input_line[137] = 1'b0;
end 
// input_line[ 136 ]
initial
begin
	input_line[136] = 1'b0;
end 
// input_line[ 135 ]
initial
begin
	input_line[135] = 1'b0;
end 
// input_line[ 134 ]
initial
begin
	input_line[134] = 1'b0;
end 
// input_line[ 133 ]
initial
begin
	input_line[133] = 1'b0;
end 
// input_line[ 132 ]
initial
begin
	input_line[132] = 1'b0;
end 
// input_line[ 131 ]
initial
begin
	input_line[131] = 1'b0;
end 
// input_line[ 130 ]
initial
begin
	input_line[130] = 1'b0;
end 
// input_line[ 129 ]
initial
begin
	input_line[129] = 1'b0;
end 
// input_line[ 128 ]
initial
begin
	input_line[128] = 1'b0;
end 
// input_line[ 127 ]
initial
begin
	input_line[127] = 1'b0;
end 
// input_line[ 126 ]
initial
begin
	input_line[126] = 1'b0;
end 
// input_line[ 125 ]
initial
begin
	input_line[125] = 1'b0;
end 
// input_line[ 124 ]
initial
begin
	input_line[124] = 1'b0;
end 
// input_line[ 123 ]
initial
begin
	input_line[123] = 1'b0;
end 
// input_line[ 122 ]
initial
begin
	input_line[122] = 1'b0;
end 
// input_line[ 121 ]
initial
begin
	input_line[121] = 1'b0;
end 
// input_line[ 120 ]
initial
begin
	input_line[120] = 1'b0;
end 
// input_line[ 119 ]
initial
begin
	input_line[119] = 1'b0;
end 
// input_line[ 118 ]
initial
begin
	input_line[118] = 1'b0;
end 
// input_line[ 117 ]
initial
begin
	input_line[117] = 1'b0;
end 
// input_line[ 116 ]
initial
begin
	input_line[116] = 1'b0;
end 
// input_line[ 115 ]
initial
begin
	input_line[115] = 1'b0;
end 
// input_line[ 114 ]
initial
begin
	input_line[114] = 1'b0;
end 
// input_line[ 113 ]
initial
begin
	input_line[113] = 1'b0;
end 
// input_line[ 112 ]
initial
begin
	input_line[112] = 1'b0;
end 
// input_line[ 111 ]
initial
begin
	input_line[111] = 1'b0;
end 
// input_line[ 110 ]
initial
begin
	input_line[110] = 1'b0;
end 
// input_line[ 109 ]
initial
begin
	input_line[109] = 1'b0;
end 
// input_line[ 108 ]
initial
begin
	input_line[108] = 1'b0;
end 
// input_line[ 107 ]
initial
begin
	input_line[107] = 1'b0;
end 
// input_line[ 106 ]
initial
begin
	input_line[106] = 1'b0;
end 
// input_line[ 105 ]
initial
begin
	input_line[105] = 1'b0;
end 
// input_line[ 104 ]
initial
begin
	input_line[104] = 1'b0;
end 
// input_line[ 103 ]
initial
begin
	input_line[103] = 1'b0;
end 
// input_line[ 102 ]
initial
begin
	input_line[102] = 1'b0;
end 
// input_line[ 101 ]
initial
begin
	input_line[101] = 1'b0;
end 
// input_line[ 100 ]
initial
begin
	input_line[100] = 1'b0;
end 
// input_line[ 99 ]
initial
begin
	input_line[99] = 1'b0;
end 
// input_line[ 98 ]
initial
begin
	input_line[98] = 1'b0;
end 
// input_line[ 97 ]
initial
begin
	input_line[97] = 1'b0;
end 
// input_line[ 96 ]
initial
begin
	input_line[96] = 1'b0;
end 
// input_line[ 95 ]
initial
begin
	input_line[95] = 1'b0;
end 
// input_line[ 94 ]
initial
begin
	input_line[94] = 1'b0;
end 
// input_line[ 93 ]
initial
begin
	input_line[93] = 1'b0;
end 
// input_line[ 92 ]
initial
begin
	input_line[92] = 1'b0;
end 
// input_line[ 91 ]
initial
begin
	input_line[91] = 1'b0;
end 
// input_line[ 90 ]
initial
begin
	input_line[90] = 1'b0;
end 
// input_line[ 89 ]
initial
begin
	input_line[89] = 1'b0;
end 
// input_line[ 88 ]
initial
begin
	input_line[88] = 1'b0;
end 
// input_line[ 87 ]
initial
begin
	input_line[87] = 1'b0;
end 
// input_line[ 86 ]
initial
begin
	input_line[86] = 1'b0;
end 
// input_line[ 85 ]
initial
begin
	input_line[85] = 1'b0;
end 
// input_line[ 84 ]
initial
begin
	input_line[84] = 1'b0;
end 
// input_line[ 83 ]
initial
begin
	input_line[83] = 1'b0;
end 
// input_line[ 82 ]
initial
begin
	input_line[82] = 1'b0;
end 
// input_line[ 81 ]
initial
begin
	input_line[81] = 1'b0;
end 
// input_line[ 80 ]
initial
begin
	input_line[80] = 1'b0;
end 
// input_line[ 79 ]
initial
begin
	input_line[79] = 1'b0;
end 
// input_line[ 78 ]
initial
begin
	input_line[78] = 1'b0;
end 
// input_line[ 77 ]
initial
begin
	input_line[77] = 1'b0;
end 
// input_line[ 76 ]
initial
begin
	input_line[76] = 1'b0;
end 
// input_line[ 75 ]
initial
begin
	input_line[75] = 1'b0;
end 
// input_line[ 74 ]
initial
begin
	input_line[74] = 1'b0;
end 
// input_line[ 73 ]
initial
begin
	input_line[73] = 1'b0;
end 
// input_line[ 72 ]
initial
begin
	input_line[72] = 1'b0;
end 
// input_line[ 71 ]
initial
begin
	input_line[71] = 1'b0;
end 
// input_line[ 70 ]
initial
begin
	input_line[70] = 1'b0;
end 
// input_line[ 69 ]
initial
begin
	input_line[69] = 1'b0;
end 
// input_line[ 68 ]
initial
begin
	input_line[68] = 1'b0;
end 
// input_line[ 67 ]
initial
begin
	input_line[67] = 1'b0;
end 
// input_line[ 66 ]
initial
begin
	input_line[66] = 1'b0;
end 
// input_line[ 65 ]
initial
begin
	input_line[65] = 1'b0;
end 
// input_line[ 64 ]
initial
begin
	input_line[64] = 1'b0;
end 
// input_line[ 63 ]
initial
begin
	input_line[63] = 1'b0;
end 
// input_line[ 62 ]
initial
begin
	input_line[62] = 1'b0;
end 
// input_line[ 61 ]
initial
begin
	input_line[61] = 1'b0;
end 
// input_line[ 60 ]
initial
begin
	input_line[60] = 1'b0;
end 
// input_line[ 59 ]
initial
begin
	input_line[59] = 1'b0;
end 
// input_line[ 58 ]
initial
begin
	input_line[58] = 1'b0;
end 
// input_line[ 57 ]
initial
begin
	input_line[57] = 1'b0;
end 
// input_line[ 56 ]
initial
begin
	input_line[56] = 1'b0;
end 
// input_line[ 55 ]
initial
begin
	input_line[55] = 1'b0;
end 
// input_line[ 54 ]
initial
begin
	input_line[54] = 1'b0;
end 
// input_line[ 53 ]
initial
begin
	input_line[53] = 1'b0;
end 
// input_line[ 52 ]
initial
begin
	input_line[52] = 1'b0;
end 
// input_line[ 51 ]
initial
begin
	input_line[51] = 1'b0;
end 
// input_line[ 50 ]
initial
begin
	input_line[50] = 1'b0;
end 
// input_line[ 49 ]
initial
begin
	input_line[49] = 1'b0;
end 
// input_line[ 48 ]
initial
begin
	input_line[48] = 1'b0;
end 
// input_line[ 47 ]
initial
begin
	input_line[47] = 1'b0;
end 
// input_line[ 46 ]
initial
begin
	input_line[46] = 1'b0;
end 
// input_line[ 45 ]
initial
begin
	input_line[45] = 1'b0;
end 
// input_line[ 44 ]
initial
begin
	input_line[44] = 1'b0;
end 
// input_line[ 43 ]
initial
begin
	input_line[43] = 1'b0;
end 
// input_line[ 42 ]
initial
begin
	input_line[42] = 1'b0;
end 
// input_line[ 41 ]
initial
begin
	input_line[41] = 1'b0;
end 
// input_line[ 40 ]
initial
begin
	input_line[40] = 1'b0;
end 
// input_line[ 39 ]
initial
begin
	input_line[39] = 1'b0;
end 
// input_line[ 38 ]
initial
begin
	input_line[38] = 1'b0;
end 
// input_line[ 37 ]
initial
begin
	input_line[37] = 1'b0;
end 
// input_line[ 36 ]
initial
begin
	input_line[36] = 1'b0;
end 
// input_line[ 35 ]
initial
begin
	input_line[35] = 1'b0;
end 
// input_line[ 34 ]
initial
begin
	input_line[34] = 1'b0;
end 
// input_line[ 33 ]
initial
begin
	input_line[33] = 1'b0;
end 
// input_line[ 32 ]
initial
begin
	input_line[32] = 1'b0;
end 
// input_line[ 31 ]
initial
begin
	input_line[31] = 1'b0;
end 
// input_line[ 30 ]
initial
begin
	input_line[30] = 1'b0;
end 
// input_line[ 29 ]
initial
begin
	input_line[29] = 1'b0;
end 
// input_line[ 28 ]
initial
begin
	input_line[28] = 1'b0;
end 
// input_line[ 27 ]
initial
begin
	input_line[27] = 1'b0;
end 
// input_line[ 26 ]
initial
begin
	input_line[26] = 1'b0;
end 
// input_line[ 25 ]
initial
begin
	input_line[25] = 1'b0;
end 
// input_line[ 24 ]
initial
begin
	input_line[24] = 1'b0;
end 
// input_line[ 23 ]
initial
begin
	input_line[23] = 1'b0;
end 
// input_line[ 22 ]
initial
begin
	input_line[22] = 1'b0;
end 
// input_line[ 21 ]
initial
begin
	input_line[21] = 1'b0;
end 
// input_line[ 20 ]
initial
begin
	input_line[20] = 1'b0;
end 
// input_line[ 19 ]
initial
begin
	input_line[19] = 1'b0;
end 
// input_line[ 18 ]
initial
begin
	input_line[18] = 1'b0;
end 
// input_line[ 17 ]
initial
begin
	input_line[17] = 1'b0;
end 
// input_line[ 16 ]
initial
begin
	input_line[16] = 1'b0;
end 
// input_line[ 15 ]
initial
begin
	input_line[15] = 1'b0;
end 
// input_line[ 14 ]
initial
begin
	input_line[14] = 1'b0;
end 
// input_line[ 13 ]
initial
begin
	input_line[13] = 1'b0;
end 
// input_line[ 12 ]
initial
begin
	input_line[12] = 1'b0;
end 
// input_line[ 11 ]
initial
begin
	input_line[11] = 1'b0;
end 
// input_line[ 10 ]
initial
begin
	input_line[10] = 1'b0;
end 
// input_line[ 9 ]
initial
begin
	input_line[9] = 1'b0;
end 
// input_line[ 8 ]
initial
begin
	input_line[8] = 1'b0;
end 
// input_line[ 7 ]
initial
begin
	input_line[7] = 1'b0;
end 
// input_line[ 6 ]
initial
begin
	input_line[6] = 1'b0;
end 
// input_line[ 5 ]
initial
begin
	input_line[5] = 1'b0;
end 
// input_line[ 4 ]
initial
begin
	input_line[4] = 1'b0;
end 
// input_line[ 3 ]
initial
begin
	input_line[3] = 1'b0;
end 
// input_line[ 2 ]
initial
begin
	input_line[2] = 1'b0;
end 
// input_line[ 1 ]
initial
begin
	input_line[1] = 1'b0;
end 
// input_line[ 0 ]
initial
begin
	input_line[0] = 1'b0;
end 

// line_ready
initial
begin
	line_ready = 1'b0;
	line_ready = #40000 1'b1;
	line_ready = #20000 1'b0;
end 
endmodule

